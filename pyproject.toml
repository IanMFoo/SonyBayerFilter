#
# Ruff Settings
#

[tool.ruff]
include = ["vipdopt/*", "tests/*"]
fix = true
show-fixes = true

select = ["E", "F", "W", "I", "N", "D", "UP", "BLE", "FBT", "B", "A", "COM", "CPY",
    "C4", "ISC", "ICN", "PIE", "T20", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID",
    "ARG", "ERA", "PL", "TRY", "NPY", "PERF", "FURB", "RUF"]
ignore = [
    "ANN",  # Type hints / annotations; handled by mypy
    "COM812",  # "Trailing Comma Missing"
    "TRY003",  # "Avoid specifying long messages outside the exception class"
    "PLR0913",  # Too many arguments to function call
    "FBT001",  # Boolean-typed positional argument in function definitions
    "FBT002",  # Boolean default positional argument in function definitions
    "FBT003",  # Boolean positional value in function call
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "tmp",
    "*.yml",
    "*.yaml",
    "*.ui",
    "*ui_*.py",
]

# Same as Black.
line-length = 88

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11
target-version = "py311"

[tool.ruff.per-file-ignores]
# Ignore import violations in all `__init__.py` files and in other relevant folders
"**/__init__.py" = ["E402", "F403", "F405"]
"**/{testing,docs}/*" = ["E402"]

# Ignore import order in __main__.py
"**/__main__.py" = ["E402"]


"**/pool.py" = [
    "SLF001",  # Ignore private member access in pool.py
    "A001",  # Ignore shadowing builtin functions
    "BLE001",  # Ignore catching BaseException
    "PLW0602",
    "PLW0603",  # Ignore global problems
    "ARG001",  # Ignore unused function arguments
    "ARG002",
]

# Ignore docstrings for properties in SonyBayerFilter config
"**/configuration/sbc.py" = ["D"]

# Ignore documentation for tests
# Ignore boolean arguments in methods for tests
"**/tests/*" = [
    "E402", "F403", "F405",  # Import violations
    "D",  # Documentation
    "FBT",  # Boolean arguments in methods
    "ARG001",  # Unused function argument
]


[tool.ruff.flake8-pytest-style]
parametrize-names-type = "csv"
parametrize-values-type = "list"

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.pep8-naming]
extend-ignore-names = ["setData", "headerData", "rowCount", "columnCount"]

[tool.ruff.pydocstyle]
# Use Google-style docstrings.
convention = "google"

# Ignore things with certain decorators
ignore-decorators = ["overrides.override"]
property-decorators = ["abc.abstractproperty"]

[tool.ruff.mccabe]
max-complexity = 15

#
# Pytest Settings
#

[tool.pytest.ini_options]
markers = [
    "smoke: these tests should always run to check for regressions quickly",
    "slow: mark tests as slow (only run with full suite)",
    "lumapi: tests that require lumapi to run"
]

testpaths = ["tests"]


#
# Coverage Settings
#

[tool.coverage.run]
branch = true
source = ["vipdopt"]
omit = [
    "*tests*",
    "*testing*",
    "*__main__.py",
    "vipdopt/simulation.py",
    "vipdopt/configuration/sbc.py",
    "vipdopt/optimization/optimization.py",
    "vipdopt/monitor.py",
    "vipdopt/gui/*",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "__str__",
    "loggig.debug",
    "logging.info",
    "logging.warning",
    "pass",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
show_missing = true
fail_under = 80

#
# mypy Settings
#
[tool.mypy]
disable_error_code = ["operator"]
exclude = [
    '/ui_',  # Ignore files starting with 'ui_'
]